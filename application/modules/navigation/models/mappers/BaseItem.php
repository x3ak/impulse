<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Navigation_Model_Mapper_BaseItem', 'doctrine');

/**
 * Navigation_Model_Mapper_BaseItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property enum $type
 * @property string $title
 * @property string $external_link
 * @property string $sysmap_identifier
 * @property string $route
 * @property boolean $read_only
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Navigation_Model_Mapper_BaseItem extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('navigation_items');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => '11',
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'menu',
              1 => 'external',
              2 => 'programmatic',
             ),
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('external_link', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('sysmap_identifier', 'string', 35, array(
             'type' => 'string',
             'length' => '35',
             ));
        $this->hasColumn('route', 'string', 30, array(
             'type' => 'string',
             'length' => '30',
             ));
        $this->hasColumn('read_only', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $nestedset0 = new Doctrine_Template_NestedSet();
        $this->actAs($nestedset0);
    }
}